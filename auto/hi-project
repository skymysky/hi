if test -n "$1";then
    if test "$1" = "--help" || test "$1" = "-h" ;then
        echo \$1:project name.
        echo -e "\tdefault:demo"
        echo \$2:type:cpp,python,lua , java ,quickjs
        echo -e "\tdefault:cpp"
        echo \$3:hi\(nginx\) install directory.
        echo -e "\tdefault:/usr/local/nginx"
        exit
    fi
fi

echo "create hi project."

if test -n "$1";then 
    PROJECT=$1
else 
    PROJECT=demo
fi

if test -n "$2";then
    TYPE=$2
else
    TYPE=cpp
fi

if test -n "$3";then 
    NGINX_INSTALL_DIR=$3
else
    NGINX_INSTALL_DIR=/usr/local/nginx
fi

echo "create hi project $PROJECT Makefile."

mkdir -pv $PROJECT

cpp_makefile_tpl(){

cat << END                                                     > $PROJECT/Makefile

PROJECT=$PROJECT.so
SRC=\$(shell find . -type f | egrep *.cpp\$\$)
OBJ=\$(patsubst %.cpp,%.o,\$(SRC))

ifndef NGINX_INSTALL_DIR
NGINX_INSTALL_DIR=/usr/local/nginx
endif

CXX=g++ 
CXXFLAGS+=-O3 -std=c++11 -fPIC -Wall -I\$(NGINX_INSTALL_DIR)/include
LDLIBS+=
LDFLAGS+=-shared 

all:\$(PROJECT)

\$(PROJECT): \$(OBJ)
	\$(CXX) \$(CXXFLAGS) \$(LDFLAGS) -o \$@ \$^ \$(LDLIBS) 

clean:
	rm -f  \$(OBJ) \$(PROJECT)

install:
	test -d \$(NGINX_INSTALL_DIR)/$TYPE || mkdir -p \$(NGINX_INSTALL_DIR)/$TYPE
	install \$(PROJECT) \$(NGINX_INSTALL_DIR)/$TYPE

END


echo "create hi project $PROJECT demo source file."

cat << END                                                     > $PROJECT/$PROJECT.cpp

#include "servlet.hpp"


namespace hi {

    class $PROJECT : public servlet {
    public:

        void handler(request& req, response& res) {
            res.headers.find("Content-Type")->second = "text/plain;charset=UTF-8";
            res.content = "hello,world";
            res.status = 200;
        }

    };
}

extern "C" hi::servlet* create() {
    return new hi::$PROJECT();
}

extern "C" void destroy(hi::servlet* p) {
    delete p;
}

END
}

python_makefile_tpl(){

cat << END                                                     > $PROJECT/Makefile

SRC=\$(shell find . -type f | egrep *.py\$\$)

ifndef NGINX_INSTALL_DIR
NGINX_INSTALL_DIR=/usr/local/nginx
endif

all:
	@echo 'ok'

clean:
	@echo 'ok'

install:\${SRC}
	for i in \${SRC};do test -d \$(NGINX_INSTALL_DIR)/$TYPE/\`dirname \$\$i\` || mkdir -p \$(NGINX_INSTALL_DIR)/$TYPE/\`dirname \$\$i\` && install \$\$i \$(NGINX_INSTALL_DIR)/$TYPE/\$\$i ;done


END

echo "create hi project $PROJECT demo source file."

cat << END                                                     > $PROJECT/$PROJECT.py
# -*- coding: UTF-8 -*-

hi_res.status(200)
hi_res.content('hello,python')


END
}


quickjs_makefile_tpl(){

cat << END                                                     > $PROJECT/Makefile

SRC=\$(shell find . -type f | egrep *.js\$\$)

ifndef NGINX_INSTALL_DIR
NGINX_INSTALL_DIR=/usr/local/nginx
endif

all:
	@echo 'ok'

clean:
	@echo 'ok'

install:\${SRC}
	for i in \${SRC};do test -d \$(NGINX_INSTALL_DIR)/$TYPE/\`dirname \$\$i\` || mkdir -p \$(NGINX_INSTALL_DIR)/$TYPE/\`dirname \$\$i\` && install \$\$i \$(NGINX_INSTALL_DIR)/$TYPE/\$\$i ;done


END

echo "create hi project $PROJECT demo source file."

cat << END                                                     > $PROJECT/$PROJECT.js


import * as hi from "hi";
hi.header('Content-Type','text/plain;charset=UTF-8')
hi.content('hello,world\n')
hi.status(200)  


END
}


lua_makefile_tpl(){

cat << END                                                     > $PROJECT/Makefile

SRC=\$(shell find . -type f | egrep *.lua\$\$)

ifndef NGINX_INSTALL_DIR
NGINX_INSTALL_DIR=/usr/local/nginx
endif


all:
	@echo 'ok'

clean:
	@echo 'ok'

install:\${SRC}
	for i in \${SRC};do test -d \$(NGINX_INSTALL_DIR)/$TYPE/\`dirname \$\$i\` || mkdir -p \$(NGINX_INSTALL_DIR)/$TYPE/\`dirname \$\$i\` && install \$\$i \$(NGINX_INSTALL_DIR)/$TYPE/\$\$i ;done


END

echo "create hi project $PROJECT demo source file."

cat << END                                                     > $PROJECT/$PROJECT.lua

hi_res:status(200)
hi_res:content('hello,lua')


END

}

java_makefile_tpl(){

cat << END                                                     > $PROJECT/Makefile

SRC=\$(shell find . -type f | egrep *.java\$\$)
OBJ=\$(patsubst %.java,%.class,\$(SRC))

ifndef NGINX_INSTALL_DIR
NGINX_INSTALL_DIR=/usr/local/nginx
endif

JFLAGS = -classpath .:\${NGINX_INSTALL_DIR}/$TYPE/hi-nginx-java.jar
JC = \${JAVA_HOME}/bin/javac

%.class:%.java
	\$(JC) \$(JFLAGS) \$^


default: classes


classes:\$(OBJ)

clean:
	rm -f \${OBJ}

install:\${OBJ}
	for i in \${OBJ};do test -d \$(NGINX_INSTALL_DIR)/$TYPE/\`dirname \$\$i\` || mkdir -p \$(NGINX_INSTALL_DIR)/$TYPE/\`dirname \$\$i\` && install \$\$i \$(NGINX_INSTALL_DIR)/$TYPE/\$\$i ;done



END

echo "create hi project $PROJECT demo source file."
mkdir -p $PROJECT/hi

cat << END                                                     > $PROJECT/hi/$PROJECT.java

package hi;

public class $PROJECT implements hi.servlet {

    public $PROJECT() {

    }

    public void handler(hi.request req, hi.response res) {
        res.status = 200;
        res.content = "hello,world";
    }
}


END



}

pre_makefile_tpl(){

cat << END                                                     > Makefile

export NGINX_INSTALL_DIR=/usr/local/nginx
PROJECT=\$(shell find . -maxdepth 1 -type d  |grep '^\./[^.]')

all:\$(PROJECT)
	for i in \$(PROJECT);do if test -f \$\$i/Makefile; then cd \$\$i && make && cd ..;  fi; done

clean:
	for i in \$(PROJECT);do if test -f \$\$i/Makefile; then cd \$\$i && make clean && cd ..;  fi; done

install:
	for i in \$(PROJECT);do if test -f \$\$i/Makefile; then cd \$\$i && make install && cd ..;  fi; done


END

}



case $TYPE in
    cpp) cpp_makefile_tpl;;
    python) python_makefile_tpl;;
    lua) lua_makefile_tpl;;
    java) java_makefile_tpl;;
    quickjs) quickjs_makefile_tpl;;
    *) echo 'Please set TYPE in (cpp,python,lua,php, java, quickjs)';;
esac

if ! test -f Makefile ;
then
    pre_makefile_tpl
fi
